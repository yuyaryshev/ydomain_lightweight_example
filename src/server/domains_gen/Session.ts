// Generated by 00000233
import { observable, computed, action, makeObservable } from "mobx";
import { assertNever, newId, ObjectId, deepClone } from "ystd";
import { dataSide_server, dataSide_client, dataSide_db } from "@yuyaryshev/ydomain_common";
import {
    anyJson,
    boolean,
    Decoder,
    array,
    dict,
    object,
    oneOf,
    optional,
    string,
    number,
    union,
    intersection,
    constant,
    tuple,
} from "@mojotech/json-type-validation";

// Generated by 30000037
import { UserObject } from "./User.js";

// Generated by 00000127
import { MetaRoot } from "@yuyaryshev/ydomain_meta";
import { FieldRef, KeyValue, KeyValueToMsgTranslator } from "@yuyaryshev/object_to_messages_ifc";
import { OdbBase, odbObject } from "@yuyaryshev/odb";
import {
    ObjectRoot,
    DomainObject,
    DomainActionSerialized,
    Domain,
    DataSide,
    isEmptyChange,
    extern_any,
    DataDirection,
} from "@yuyaryshev/ydomain_common";

import { Ysocket, UpstreamChannel } from "@yuyaryshev/ydomain_server";

// Generated by 00000128
import { SessionBase, Ysocket_constructor, YtransportService } from "@yuyaryshev/ytransport_common";

// Generated by 30000026
export type SessionDomain = Domain<SessionObject>;

export interface SessionObject {
    sessionId: FieldRef<string>;
    login: FieldRef<string>;
    connected: FieldRef<boolean>;
    connecting: FieldRef<boolean>;
    authed: FieldRef<boolean>;
    authPending: FieldRef<boolean>;
    authError: FieldRef<string>;
    user: FieldRef<UserObject | undefined>;
    connectionErrorStr: FieldRef<string>;
    webSocket: extern_any;
    sendQueue: extern_any;
    pendingRequests: extern_any;
    pendingResponses: extern_any;
    overrideMessageHandler: extern_any;
    sendPacketScheduled: extern_any;
    firstSentId: extern_any;
    lastSentId: extern_any;
    lastRecvId: extern_any;
    lastMessageId: extern_any;
    closed: extern_any;
    fullTrust: extern_any;
    token: extern_any;
}

export type SessionObjectKV = KeyValue<unknown, SessionObject>;

// Generated by 30000029
export const SessionDomain = {
    id: "308bb027-d9ea-442c-befc-60a0e1e828ce",
    name: "Session",
    defaultObjectRoot: undefined as ObjectRoot | undefined,

    isMyInstance: (obj: any): obj is SessionObject => {
        return typeof obj === "object" && obj.domain === SessionDomain;
    },

    // Generated by 30000021
    getOrCreate: (id: ObjectId | undefined): SessionObject => {
        if (!SessionDomain.defaultObjectRoot)
            throw new Error(
                `CODE00000000 Session.getOrCreate You should first set defaultObjectRoot before using getOrCreate or else use getOrCreateEx!`,
            );
        return SessionDomain.getOrCreateEx(SessionDomain.defaultObjectRoot, id);
    },

    getOrCreateEx: (objectRoot: ObjectRoot, id: ObjectId | undefined): SessionObject => {
        if (id && id.split(":")[0] !== "308bb027-d9ea-442c-befc-60a0e1e828ce")
            throw new Error(`CODE00000000 Session.getOrCreate Incorrect domainId in id = ${id}`);
        if (!id) {
            id = "308bb027-d9ea-442c-befc-60a0e1e828ce:" + newId();
        }
        const r = new KeyValueToMsgTranslator<unknown, SessionObject>({
            baseTypeMeta: objectRoot.odbConnection.odbBase.__metaRoot.expectType("Session"),
            stateReader: objectRoot.odbConnection,
            actionProcessor: objectRoot.stdActionProcessor,
            path: ["Session", id],
            createIfNotExists: true,
        });
        return r.asObj();
    },

    // Generated by 30000021
    getOrThrow: (id: ObjectId): SessionObject => {
        if (!SessionDomain.defaultObjectRoot)
            throw new Error(
                `CODE00000000 Session.getOrThrow You should first set defaultObjectRoot before using getOrThrow or else use getOrThrowEx!`,
            );
        return SessionDomain.getOrThrowEx(SessionDomain.defaultObjectRoot, id);
    },

    getOrThrowEx: (objectRoot: ObjectRoot, id: ObjectId): SessionObject => {
        if (id && id.split(":")[0] !== "308bb027-d9ea-442c-befc-60a0e1e828ce")
            throw new Error(`CODE00000000 Session.getOrThrow Incorrect domainId in id = ${id}`);
        if (!id) {
            throw new Error(`CODE00000000 Session.getOrThrow id is empty!`);
        }
        const r = new KeyValueToMsgTranslator<unknown, SessionObject>({
            baseTypeMeta: objectRoot.odbConnection.odbBase.__metaRoot.expectType("Session"),
            stateReader: objectRoot.odbConnection,
            actionProcessor: objectRoot.stdActionProcessor,
            path: ["Session", id],
            createIfNotExists: true,
        });
        return r.asObj();
    },

    // Generated by 30000021
    getOrUndefined: (id: ObjectId | undefined): SessionObject | undefined => {
        if (!SessionDomain.defaultObjectRoot)
            throw new Error(
                `CODE00000000 Session.getOrUndefined You should first set defaultObjectRoot before using getOrUndefined or else use getOrUndefinedEx!`,
            );
        return SessionDomain.getOrUndefinedEx(SessionDomain.defaultObjectRoot, id);
    },

    getOrUndefinedEx: (objectRoot: ObjectRoot, id: ObjectId | undefined): SessionObject | undefined => {
        if (id && id.split(":")[0] !== "308bb027-d9ea-442c-befc-60a0e1e828ce")
            throw new Error(`CODE00000000 Session.getOrUndefined Incorrect domainId in id = ${id}`);
        if (!id) {
            return undefined;
        }
        const r = new KeyValueToMsgTranslator<unknown, SessionObject>({
            baseTypeMeta: objectRoot.odbConnection.odbBase.__metaRoot.expectType("Session"),
            stateReader: objectRoot.odbConnection,
            actionProcessor: objectRoot.stdActionProcessor,
            path: ["Session", id],
            createIfNotExists: true,
        });
        return r.asObj();
    },

    // Generated by 30000025
    verifyPermissions: (objectRoot: ObjectRoot, object: SessionObject, domainAction: DomainActionSerialized): boolean => {
        return true;
    },

    // Generated by 30000050
    beforeSendAction: (
        objectRoot: ObjectRoot,
        object: SessionObject,
        domainAction: DomainActionSerialized,
        targetDataSide: DataSide,
        destSession: SessionObject | undefined,
    ): DomainActionSerialized | undefined => {
        let cloned: true | undefined;
        let change = domainAction;

        //-------------------------------------------- Custom code start --------------------------------------------
        // prepareChange
        if (destSession?.sessionId.get() !== object?.sessionId.get()) {
            return undefined;
        }
        //-------------------------------------------- Custom code end --------------------------------------------

        return change;
    },
};

// Generated by 30000051
//export function newSessionObject(service: unknown) {
//    const root = (service as any).ObjectRoot as ObjectRoot;
//    if (!root)
//        throw new Error(`CODE00000000 - can't create Session without ObjectRoot!`);
//    return new SessionObject(root);
//}
